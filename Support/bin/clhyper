#!/usr/bin/env perl -w

use strict;

my %map = (
	"&allow-other-keys", "03_da#AMallow-other-keys",
	"&aux", "03_da#AMaux",
	"&body", "03_dd#AMbody",
	"&environment", "03_dd#AMenvironment",
	"&key", "03_da#AMkey",
	"&optional", "03_da#AMoptional",
	"&rest", "03_da#AMrest",
	"&whole", "03_dd#AMwhole",
	"*", "a_st#ST",
	"**", "v__stst_#STST",
	"***", "v__stst_#STSTST",
	"*break-on-signals*", "v_break_#STbreak-on-signalsST",
	"*compile-file-pathname*", "v_cmp_fi#STcompile-file-pathnameST",
	"*compile-file-truename*", "v_cmp_fi#STcompile-file-truenameST",
	"*compile-print*", "v_cmp_pr#STcompile-printST",
	"*compile-verbose*", "v_cmp_pr#STcompile-verboseST",
	"*debug-io*", "v_debug_#STdebug-ioST",
	"*debugger-hook*", "v_debugg#STdebugger-hookST",
	"*default-pathname-defaults*", "v_defaul#STdefault-pathname-defaultsST",
	"*error-output*", "v_debug_#STerror-outputST",
	"*features*", "v_featur#STfeaturesST",
	"*gensym-counter*", "v_gensym#STgensym-counterST",
	"*load-pathname*", "v_ld_pns#STload-pathnameST",
	"*load-print*", "v_ld_prs#STload-printST",
	"*load-truename*", "v_ld_pns#STload-truenameST",
	"*load-verbose*", "v_ld_prs#STload-verboseST",
	"*macroexpand-hook*", "v_mexp_h#STmacroexpand-hookST",
	"*modules*", "v_module#STmodulesST",
	"*package*", "v_pkg#STpackageST",
	"*print-array*", "v_pr_ar#STprint-arrayST",
	"*print-base*", "v_pr_bas#STprint-baseST",
	"*print-case*", "v_pr_cas#STprint-caseST",
	"*print-circle*", "v_pr_cir#STprint-circleST",
	"*print-escape*", "v_pr_esc#STprint-escapeST",
	"*print-gensym*", "v_pr_gen#STprint-gensymST",
	"*print-length*", "v_pr_lev#STprint-lengthST",
	"*print-level*", "v_pr_lev#STprint-levelST",
	"*print-lines*", "v_pr_lin#STprint-linesST",
	"*print-miser-width*", "v_pr_mis#STprint-miser-widthST",
	"*print-pprint-dispatch*", "v_pr_ppr#STprint-pprint-dispatchST",
	"*print-pretty*", "v_pr_pre#STprint-prettyST",
	"*print-radix*", "v_pr_bas#STprint-radixST",
	"*print-readably*", "v_pr_rda#STprint-readablyST",
	"*print-right-margin*", "v_pr_rig#STprint-right-marginST",
	"*query-io*", "v_debug_#STquery-ioST",
	"*random-state*", "v_rnd_st#STrandom-stateST",
	"*read-base*", "v_rd_bas#STread-baseST",
	"*read-default-float-format*", "v_rd_def#STread-default-float-formatST",
	"*read-eval*", "v_rd_eva#STread-evalST",
	"*read-suppress*", "v_rd_sup#STread-suppressST",
	"*readtable*", "v_rdtabl#STreadtableST",
	"*standard-input*", "v_debug_#STstandard-inputST",
	"*standard-output*", "v_debug_#STstandard-outputST",
	"*terminal-io*", "v_termin#STterminal-ioST",
	"*trace-output*", "v_debug_#STtrace-outputST",
	"+", "a_pl#PL",
	"++", "v_pl_plp#PLPL",
	"+++", "v_pl_plp#PLPLPL",
	"-", "a__#-",
	"/", "a_sl#SL",
	"//", "v_sl_sls#SLSL",
	"///", "v_sl_sls#SLSLSL",
	"/=", "f_eq_sle#SLEQ",
	"1+", "f_1pl_1_#1PL",
	"1-", "f_1pl_1_#1-",
	"<", "f_eq_sle#LT",
	"<=", "f_eq_sle#LTEQ",
	"=", "f_eq_sle#EQ",
	">", "f_eq_sle#GT",
	">=", "f_eq_sle#GTEQ",
	"abort", "a_abort#abort",
	"abs", "f_abs#abs",
	"acons", "f_acons#acons",
	"acos", "f_asin_#acos",
	"acosh", "f_sinh_#acosh",
	"add-method", "f_add_me#add-method",
	"adjoin", "f_adjoin#adjoin",
	"adjust-array", "f_adjust#adjust-array",
	"adjustable-array-p", "f_adju_1#adjustable-array-p",
	"allocate-instance", "f_alloca#allocate-instance",
	"alpha-char-p", "f_alpha_#alpha-char-p",
	"alphanumericp", "f_alphan#alphanumericp",
	"and", "a_and#and",
	"append", "f_append#append",
	"apply", "f_apply#apply",
	"apropos", "f_apropo#apropos",
	"apropos-list", "f_apropo#apropos-list",
	"aref", "f_aref#aref",
	"arithmetic-error", "e_arithm#arithmetic-error",
	"arithmetic-error-operands", "f_arithm#arithmetic-error-operands",
	"arithmetic-error-operation", "f_arithm#arithmetic-error-operation",
	"array", "t_array#array",
	"array-dimension", "f_ar_dim#array-dimension",
	"array-dimension-limit", "v_ar_dim#array-dimension-limit",
	"array-dimensions", "f_ar_d_1#array-dimensions",
	"array-displacement", "f_ar_dis#array-displacement",
	"array-element-type", "f_ar_ele#array-element-type",
	"array-has-fill-pointer-p", "f_ar_has#array-has-fill-pointer-p",
	"array-in-bounds-p", "f_ar_in_#array-in-bounds-p",
	"array-rank", "f_ar_ran#array-rank",
	"array-rank-limit", "v_ar_ran#array-rank-limit",
	"array-row-major-index", "f_ar_row#array-row-major-index",
	"array-total-size", "f_ar_tot#array-total-size",
	"array-total-size-limit", "v_ar_tot#array-total-size-limit",
	"arrayp", "f_arrayp#arrayp",
	"ash", "f_ash#ash",
	"asin", "f_asin_#asin",
	"asinh", "f_sinh_#asinh",
	"assert", "m_assert#assert",
	"assoc", "f_assocc#assoc",
	"assoc-if", "f_assocc#assoc-if",
	"assoc-if-not", "f_assocc#assoc-if-not",
	"atan", "f_asin_#atan",
	"atanh", "f_sinh_#atanh",
	"atom", "a_atom#atom",
	"base-char", "t_base_c#base-char",
	"base-string", "t_base_s#base-string",
	"bignum", "t_bignum#bignum",
	"bit", "a_bit#bit",
	"bit-and", "f_bt_and#bit-and",
	"bit-andc1", "f_bt_and#bit-andc1",
	"bit-andc2", "f_bt_and#bit-andc2",
	"bit-eqv", "f_bt_and#bit-eqv",
	"bit-ior", "f_bt_and#bit-ior",
	"bit-nand", "f_bt_and#bit-nand",
	"bit-nor", "f_bt_and#bit-nor",
	"bit-not", "f_bt_and#bit-not",
	"bit-orc1", "f_bt_and#bit-orc1",
	"bit-orc2", "f_bt_and#bit-orc2",
	"bit-vector", "t_bt_vec#bit-vector",
	"bit-vector-p", "f_bt_vec#bit-vector-p",
	"bit-xor", "f_bt_and#bit-xor",
	"block", "s_block#block",
	"boole", "f_boole#boole",
	"boole-1", "v_b_1_b#boole-1",
	"boole-2", "v_b_1_b#boole-2",
	"boole-and", "v_b_1_b#boole-and",
	"boole-andc1", "v_b_1_b#boole-andc1",
	"boole-andc2", "v_b_1_b#boole-andc2",
	"boole-c1", "v_b_1_b#boole-c1",
	"boole-c2", "v_b_1_b#boole-c2",
	"boole-clr", "v_b_1_b#boole-clr",
	"boole-eqv", "v_b_1_b#boole-eqv",
	"boole-ior", "v_b_1_b#boole-ior",
	"boole-nand", "v_b_1_b#boole-nand",
	"boole-nor", "v_b_1_b#boole-nor",
	"boole-orc1", "v_b_1_b#boole-orc1",
	"boole-orc2", "v_b_1_b#boole-orc2",
	"boole-set", "v_b_1_b#boole-set",
	"boole-xor", "v_b_1_b#boole-xor",
	"boolean", "t_ban#boolean",
	"both-case-p", "f_upper_#both-case-p",
	"boundp", "f_boundp#boundp",
	"break", "f_break#break",
	"broadcast-stream", "t_broadc#broadcast-stream",
	"broadcast-stream-streams", "f_broadc#broadcast-stream-streams",
	"built-in-class", "t_built_#built-in-class",
	"butlast", "f_butlas#butlast",
	"byte", "f_by_by#byte",
	"byte-position", "f_by_by#byte-position",
	"byte-size", "f_by_by#byte-size",
	"caaaar", "f_car_c#caaaar",
	"caaadr", "f_car_c#caaadr",
	"caaar", "f_car_c#caaar",
	"caadar", "f_car_c#caadar",
	"caaddr", "f_car_c#caaddr",
	"caadr", "f_car_c#caadr",
	"caar", "f_car_c#caar",
	"cadaar", "f_car_c#cadaar",
	"cadadr", "f_car_c#cadadr",
	"cadar", "f_car_c#cadar",
	"caddar", "f_car_c#caddar",
	"cadddr", "f_car_c#cadddr",
	"caddr", "f_car_c#caddr",
	"cadr", "f_car_c#cadr",
	"call-arguments-limit", "v_call_a#call-arguments-limit",
	"call-method", "m_call_m#call-method",
	"call-next-method", "f_call_n#call-next-method",
	"car", "f_car_c#car",
	"case", "m_case_#case",
	"catch", "s_catch#catch",
	"ccase", "m_case_#ccase",
	"cdaaar", "f_car_c#cdaaar",
	"cdaadr", "f_car_c#cdaadr",
	"cdaar", "f_car_c#cdaar",
	"cdadar", "f_car_c#cdadar",
	"cdaddr", "f_car_c#cdaddr",
	"cdadr", "f_car_c#cdadr",
	"cdar", "f_car_c#cdar",
	"cddaar", "f_car_c#cddaar",
	"cddadr", "f_car_c#cddadr",
	"cddar", "f_car_c#cddar",
	"cdddar", "f_car_c#cdddar",
	"cddddr", "f_car_c#cddddr",
	"cdddr", "f_car_c#cdddr",
	"cddr", "f_car_c#cddr",
	"cdr", "f_car_c#cdr",
	"ceiling", "f_floorc#ceiling",
	"cell-error", "e_cell_e#cell-error",
	"cell-error-name", "f_cell_e#cell-error-name",
	"cerror", "f_cerror#cerror",
	"change-class", "f_chg_cl#change-class",
	"char", "f_char_#char",
	"char-code", "f_char_c#char-code",
	"char-code-limit", "v_char_c#char-code-limit",
	"char-downcase", "f_char_u#char-downcase",
	"char-equal", "f_chareq#char-equal",
	"char-greaterp", "f_chareq#char-greaterp",
	"char-int", "f_char_i#char-int",
	"char-lessp", "f_chareq#char-lessp",
	"char-name", "f_char_n#char-name",
	"char-not-equal", "f_chareq#char-not-equal",
	"char-not-greaterp", "f_chareq#char-not-greaterp",
	"char-not-lessp", "f_chareq#char-not-lessp",
	"char-upcase", "f_char_u#char-upcase",
	"char/=", "f_chareq#charSLEQ",
	"char<", "f_chareq#charLT",
	"char<=", "f_chareq#charLTEQ",
	"char=", "f_chareq#charEQ",
	"char>", "f_chareq#charGT",
	"char>=", "f_chareq#charGTEQ",
	"character", "a_ch#character",
	"characterp", "f_chp#characterp",
	"check-type", "m_check_#check-type",
	"cis", "f_cis#cis",
	"class", "t_class#class",
	"class-name", "f_class_#class-name",
	"class-of", "f_clas_1#class-of",
	"clear-input", "f_clear_#clear-input",
	"clear-output", "f_finish#clear-output",
	"close", "f_close#close",
	"clrhash", "f_clrhas#clrhash",
	"code-char", "f_code_c#code-char",
	"coerce", "f_coerce#coerce",
	"compilation-speed", "d_optimi#compilation-speed",
	"compile", "f_cmp#compile",
	"compile-file", "f_cmp_fi#compile-file",
	"compile-file-pathname", "f_cmp__1#compile-file-pathname",
	"compiled-function", "t_cmpd_f#compiled-function",
	"compiled-function-p", "f_cmpd_f#compiled-function-p",
	"compiler-macro", "f_docume#compiler-macro",
	"compiler-macro-function", "f_cmp_ma#compiler-macro-function",
	"complement", "f_comple#complement",
	"complex", "a_comple#complex",
	"complexp", "f_comp_3#complexp",
	"compute-applicable-methods", "f_comput#compute-applicable-methods",
	"compute-restarts", "f_comp_1#compute-restarts",
	"concatenate", "f_concat#concatenate",
	"concatenated-stream", "t_concat#concatenated-stream",
	"concatenated-stream-streams", "f_conc_1#concatenated-stream-streams",
	"cond", "m_cond#cond",
	"condition", "e_cnd#condition",
	"conjugate", "f_conjug#conjugate",
	"cons", "a_cons#cons",
	"consp", "f_consp#consp",
	"constantly", "f_cons_1#constantly",
	"constantp", "f_consta#constantp",
	"continue", "a_contin#continue",
	"control-error", "e_contro#control-error",
	"copy-alist", "f_cp_ali#copy-alist",
	"copy-list", "f_cp_lis#copy-list",
	"copy-pprint-dispatch", "f_cp_ppr#copy-pprint-dispatch",
	"copy-readtable", "f_cp_rdt#copy-readtable",
	"copy-seq", "f_cp_seq#copy-seq",
	"copy-structure", "f_cp_stu#copy-structure",
	"copy-symbol", "f_cp_sym#copy-symbol",
	"copy-tree", "f_cp_tre#copy-tree",
	"cos", "f_sin_c#cos",
	"cosh", "f_sinh_#cosh",
	"count", "f_countc#count",
	"count-if", "f_countc#count-if",
	"count-if-not", "f_countc#count-if-not",
	"ctypecase", "m_tpcase#ctypecase",
	"debug", "d_optimi#debug",
	"decf", "m_incf_#decf",
	"declaim", "m_declai#declaim",
	"declaration", "d_declar#declaration",
	"declare", "s_declar#declare",
	"decode-float", "f_dec_fl#decode-float",
	"decode-universal-time", "f_dec_un#decode-universal-time",
	"defclass", "m_defcla#defclass",
	"defconstant", "m_defcon#defconstant",
	"defgeneric", "m_defgen#defgeneric",
	"define-compiler-macro", "m_define#define-compiler-macro",
	"define-condition", "m_defi_5#define-condition",
	"define-method-combination", "m_defi_4#define-method-combination",
	"define-modify-macro", "m_defi_2#define-modify-macro",
	"define-setf-expander", "m_defi_3#define-setf-expander",
	"define-symbol-macro", "m_defi_1#define-symbol-macro",
	"defmacro", "m_defmac#defmacro",
	"defmethod", "m_defmet#defmethod",
	"defpackage", "m_defpkg#defpackage",
	"defparameter", "m_defpar#defparameter",
	"defsetf", "m_defset#defsetf",
	"defstruct", "m_defstr#defstruct",
	"deftype", "m_deftp#deftype",
	"defun", "m_defun#defun",
	"defvar", "m_defpar#defvar",
	"delete", "f_rm_rm#delete",
	"delete-duplicates", "f_rm_dup#delete-duplicates",
	"delete-file", "f_del_fi#delete-file",
	"delete-if", "f_rm_rm#delete-if",
	"delete-if-not", "f_rm_rm#delete-if-not",
	"delete-package", "f_del_pk#delete-package",
	"denominator", "f_numera#denominator",
	"deposit-field", "f_deposi#deposit-field",
	"describe", "f_descri#describe",
	"describe-object", "f_desc_1#describe-object",
	"destructuring-bind", "m_destru#destructuring-bind",
	"digit-char", "f_digit_#digit-char",
	"digit-char-p", "f_digi_1#digit-char-p",
	"directory", "f_dir#directory",
	"directory-namestring", "f_namest#directory-namestring",
	"disassemble", "f_disass#disassemble",
	"division-by-zero", "e_divisi#division-by-zero",
	"do", "m_do_do#do",
	"do*", "m_do_do#doST",
	"do-all-symbols", "m_do_sym#do-all-symbols",
	"do-external-symbols", "m_do_sym#do-external-symbols",
	"do-symbols", "m_do_sym#do-symbols",
	"documentation", "f_docume#documentation",
	"dolist", "m_dolist#dolist",
	"dotimes", "m_dotime#dotimes",
	"double-float", "t_short_#double-float",
	"double-float-epsilon", "v_short_#double-float-epsilon",
	"double-float-negative-epsilon", "v_short_#double-float-negative-epsilon",
	"dpb", "f_dpb#dpb",
	"dribble", "f_dribbl#dribble",
	"dynamic-extent", "d_dynami#dynamic-extent",
	"ecase", "m_case_#ecase",
	"echo-stream", "t_echo_s#echo-stream",
	"echo-stream-input-stream", "f_echo_s#echo-stream-input-stream",
	"echo-stream-output-stream", "f_echo_s#echo-stream-output-stream",
	"ed", "f_ed#ed",
	"eighth", "f_firstc#eighth",
	"elt", "f_elt#elt",
	"encode-universal-time", "f_encode#encode-universal-time",
	"end-of-file", "e_end_of#end-of-file",
	"endp", "f_endp#endp",
	"enough-namestring", "f_namest#enough-namestring",
	"ensure-directories-exist", "f_ensu_1#ensure-directories-exist",
	"ensure-generic-function", "f_ensure#ensure-generic-function",
	"eq", "f_eq#eq",
	"eql", "a_eql#eql",
	"equal", "f_equal#equal",
	"equalp", "f_equalp#equalp",
	"error", "a_error#error",
	"etypecase", "m_tpcase#etypecase",
	"eval", "f_eval#eval",
	"eval-when", "s_eval_w#eval-when",
	"evenp", "f_evenpc#evenp",
	"every", "f_everyc#every",
	"exp", "f_exp_e#exp",
	"export", "f_export#export",
	"expt", "f_exp_e#expt",
	"extended-char", "t_extend#extended-char",
	"fboundp", "f_fbound#fboundp",
	"fceiling", "f_floorc#fceiling",
	"fdefinition", "f_fdefin#fdefinition",
	"ffloor", "f_floorc#ffloor",
	"fifth", "f_firstc#fifth",
	"file-author", "f_file_a#file-author",
	"file-error", "e_file_e#file-error",
	"file-error-pathname", "f_file_e#file-error-pathname",
	"file-length", "f_file_l#file-length",
	"file-namestring", "f_namest#file-namestring",
	"file-position", "f_file_p#file-position",
	"file-stream", "t_file_s#file-stream",
	"file-string-length", "f_file_s#file-string-length",
	"file-write-date", "f_file_w#file-write-date",
	"fill", "f_fill#fill",
	"fill-pointer", "f_fill_p#fill-pointer",
	"find", "f_find_#find",
	"find-all-symbols", "f_find_a#find-all-symbols",
	"find-class", "f_find_c#find-class",
	"find-if", "f_find_#find-if",
	"find-if-not", "f_find_#find-if-not",
	"find-method", "f_find_m#find-method",
	"find-package", "f_find_p#find-package",
	"find-restart", "f_find_r#find-restart",
	"find-symbol", "f_find_s#find-symbol",
	"finish-output", "f_finish#finish-output",
	"first", "f_firstc#first",
	"fixnum", "t_fixnum#fixnum",
	"flet", "s_flet_#flet",
	"float", "a_float#float",
	"float-digits", "f_dec_fl#float-digits",
	"float-precision", "f_dec_fl#float-precision",
	"float-radix", "f_dec_fl#float-radix",
	"float-sign", "f_dec_fl#float-sign",
	"floating-point-inexact", "e_floa_1#floating-point-inexact",
	"floating-point-invalid-operation", "e_floati#floating-point-invalid-operation",
	"floating-point-overflow", "e_floa_2#floating-point-overflow",
	"floating-point-underflow", "e_floa_3#floating-point-underflow",
	"floatp", "f_floatp#floatp",
	"floor", "f_floorc#floor",
	"fmakunbound", "f_fmakun#fmakunbound",
	"force-output", "f_finish#force-output",
	"format", "f_format#format",
	"formatter", "m_format#formatter",
	"fourth", "f_firstc#fourth",
	"fresh-line", "f_terpri#fresh-line",
	"fround", "f_floorc#fround",
	"ftruncate", "f_floorc#ftruncate",
	"ftype", "d_ftype#ftype",
	"funcall", "f_funcal#funcall",
	"function", "a_fn#function",
	"function-keywords", "f_fn_kwd#function-keywords",
	"function-lambda-expression", "f_fn_lam#function-lambda-expression",
	"functionp", "f_fnp#functionp",
	"gcd", "f_gcd#gcd",
	"generic-function", "t_generi#generic-function",
	"gensym", "f_gensym#gensym",
	"gentemp", "f_gentem#gentemp",
	"get", "f_get#get",
	"get-decoded-time", "f_get_un#get-decoded-time",
	"get-dispatch-macro-character", "f_set__1#get-dispatch-macro-character",
	"get-internal-real-time", "f_get_in#get-internal-real-time",
	"get-internal-run-time", "f_get__1#get-internal-run-time",
	"get-macro-character", "f_set_ma#get-macro-character",
	"get-output-stream-string", "f_get_ou#get-output-stream-string",
	"get-properties", "f_get_pr#get-properties",
	"get-setf-expansion", "f_get_se#get-setf-expansion",
	"get-universal-time", "f_get_un#get-universal-time",
	"getf", "f_getf#getf",
	"gethash", "f_gethas#gethash",
	"go", "s_go#go",
	"graphic-char-p", "f_graphi#graphic-char-p",
	"handler-bind", "m_handle#handler-bind",
	"handler-case", "m_hand_1#handler-case",
	"hash-table", "t_hash_t#hash-table",
	"hash-table-count", "f_hash_1#hash-table-count",
	"hash-table-p", "f_hash_t#hash-table-p",
	"hash-table-rehash-size", "f_hash_2#hash-table-rehash-size",
	"hash-table-rehash-threshold", "f_hash_3#hash-table-rehash-threshold",
	"hash-table-size", "f_hash_4#hash-table-size",
	"hash-table-test", "f_hash_5#hash-table-test",
	"host-namestring", "f_namest#host-namestring",
	"identity", "f_identi#identity",
	"if", "s_if#if",
	"ignorable", "d_ignore#ignorable",
	"ignore", "d_ignore#ignore",
	"ignore-errors", "m_ignore#ignore-errors",
	"imagpart", "f_realpa#imagpart",
	"import", "f_import#import",
	"in-package", "m_in_pkg#in-package",
	"incf", "m_incf_#incf",
	"initialize-instance", "f_init_i#initialize-instance",
	"inline", "d_inline#inline",
	"input-stream-p", "f_in_stm#input-stream-p",
	"inspect", "f_inspec#inspect",
	"integer", "t_intege#integer",
	"integer-decode-float", "f_dec_fl#integer-decode-float",
	"integer-length", "f_intege#integer-length",
	"integerp", "f_inte_1#integerp",
	"interactive-stream-p", "f_intera#interactive-stream-p",
	"intern", "f_intern#intern",
	"internal-time-units-per-second", "v_intern#internal-time-units-per-second",
	"intersection", "f_isec_#intersection",
	"invalid-method-error", "f_invali#invalid-method-error",
	"invoke-debugger", "f_invoke#invoke-debugger",
	"invoke-restart", "f_invo_1#invoke-restart",
	"invoke-restart-interactively", "f_invo_2#invoke-restart-interactively",
	"isqrt", "f_sqrt_#isqrt",
	"keyword", "t_kwd#keyword",
	"keywordp", "f_kwdp#keywordp",
	"labels", "s_flet_#labels",
	"lambda", "a_lambda#lambda",
	"lambda-list-keywords", "v_lambda#lambda-list-keywords",
	"lambda-parameters-limit", "v_lamb_1#lambda-parameters-limit",
	"last", "f_last#last",
	"lcm", "f_lcm#lcm",
	"ldb", "f_ldb#ldb",
	"ldb-test", "f_ldb_te#ldb-test",
	"ldiff", "f_ldiffc#ldiff",
	"least-negative-double-float", "v_most_1#least-negative-double-float",
	"least-negative-long-float", "v_most_1#least-negative-long-float",
	"least-negative-normalized-double-float", "v_most_1#least-negative-normalized-double-float",
	"least-negative-normalized-long-float", "v_most_1#least-negative-normalized-long-float",
	"least-negative-normalized-short-float", "v_most_1#least-negative-normalized-short-float",
	"least-negative-normalized-single-float", "v_most_1#least-negative-normalized-single-float",
	"least-negative-short-float", "v_most_1#least-negative-short-float",
	"least-negative-single-float", "v_most_1#least-negative-single-float",
	"least-positive-double-float", "v_most_1#least-positive-double-float",
	"least-positive-long-float", "v_most_1#least-positive-long-float",
	"least-positive-normalized-double-float", "v_most_1#least-positive-normalized-double-float",
	"least-positive-normalized-long-float", "v_most_1#least-positive-normalized-long-float",
	"least-positive-normalized-short-float", "v_most_1#least-positive-normalized-short-float",
	"least-positive-normalized-single-float", "v_most_1#least-positive-normalized-single-float",
	"least-positive-short-float", "v_most_1#least-positive-short-float",
	"least-positive-single-float", "v_most_1#least-positive-single-float",
	"length", "f_length#length",
	"let", "s_let_l#let",
	"let*", "s_let_l#letST",
	"lisp-implementation-type", "f_lisp_i#lisp-implementation-type",
	"lisp-implementation-version", "f_lisp_i#lisp-implementation-version",
	"list", "a_list#list",
	"list*", "f_list_#listST",
	"list-all-packages", "f_list_a#list-all-packages",
	"list-length", "f_list_l#list-length",
	"listen", "f_listen#listen",
	"listp", "f_listp#listp",
	"load", "f_load#load",
	"load-logical-pathname-translations", "f_ld_log#load-logical-pathname-translations",
	"load-time-value", "s_ld_tim#load-time-value",
	"locally", "s_locall#locally",
	"log", "f_log#log",
	"logand", "f_logand#logand",
	"logandc1", "f_logand#logandc1",
	"logandc2", "f_logand#logandc2",
	"logbitp", "f_logbtp#logbitp",
	"logcount", "f_logcou#logcount",
	"logeqv", "f_logand#logeqv",
	"logical-pathname", "a_logica#logical-pathname",
	"logical-pathname-translations", "f_logica#logical-pathname-translations",
	"logior", "f_logand#logior",
	"lognand", "f_logand#lognand",
	"lognor", "f_logand#lognor",
	"lognot", "f_logand#lognot",
	"logorc1", "f_logand#logorc1",
	"logorc2", "f_logand#logorc2",
	"logtest", "f_logtes#logtest",
	"logxor", "f_logand#logxor",
	"long-float", "t_short_#long-float",
	"long-float-epsilon", "v_short_#long-float-epsilon",
	"long-float-negative-epsilon", "v_short_#long-float-negative-epsilon",
	"long-site-name", "f_short_#long-site-name",
	"loop", "m_loop#loop",
	"loop-finish", "m_loop_f#loop-finish",
	"lower-case-p", "f_upper_#lower-case-p",
	"machine-instance", "f_mach_i#machine-instance",
	"machine-type", "f_mach_t#machine-type",
	"machine-version", "f_mach_v#machine-version",
	"macro-function", "f_macro_#macro-function",
	"macroexpand", "f_mexp_#macroexpand",
	"macroexpand-1", "f_mexp_#macroexpand-1",
	"macrolet", "s_flet_#macrolet",
	"make-array", "f_mk_ar#make-array",
	"make-broadcast-stream", "f_mk_bro#make-broadcast-stream",
	"make-concatenated-stream", "f_mk_con#make-concatenated-stream",
	"make-condition", "f_mk_cnd#make-condition",
	"make-dispatch-macro-character", "f_mk_dis#make-dispatch-macro-character",
	"make-echo-stream", "f_mk_ech#make-echo-stream",
	"make-hash-table", "f_mk_has#make-hash-table",
	"make-instance", "f_mk_ins#make-instance",
	"make-instances-obsolete", "f_mk_i_1#make-instances-obsolete",
	"make-list", "f_mk_lis#make-list",
	"make-load-form", "f_mk_ld_#make-load-form",
	"make-load-form-saving-slots", "f_mk_l_1#make-load-form-saving-slots",
	"make-method", "m_call_m#make-method",
	"make-package", "f_mk_pkg#make-package",
	"make-pathname", "f_mk_pn#make-pathname",
	"make-random-state", "f_mk_rnd#make-random-state",
	"make-sequence", "f_mk_seq#make-sequence",
	"make-string", "f_mk_stg#make-string",
	"make-string-input-stream", "f_mk_s_1#make-string-input-stream",
	"make-string-output-stream", "f_mk_s_2#make-string-output-stream",
	"make-symbol", "f_mk_sym#make-symbol",
	"make-synonym-stream", "f_mk_syn#make-synonym-stream",
	"make-two-way-stream", "f_mk_two#make-two-way-stream",
	"makunbound", "f_makunb#makunbound",
	"map", "f_map#map",
	"map-into", "f_map_in#map-into",
	"mapc", "f_mapc_#mapc",
	"mapcan", "f_mapc_#mapcan",
	"mapcar", "f_mapc_#mapcar",
	"mapcon", "f_mapc_#mapcon",
	"maphash", "f_maphas#maphash",
	"mapl", "f_mapc_#mapl",
	"maplist", "f_mapc_#maplist",
	"mask-field", "f_mask_f#mask-field",
	"max", "f_max_m#max",
	"member", "a_member#member",
	"member-if", "f_mem_m#member-if",
	"member-if-not", "f_mem_m#member-if-not",
	"merge", "f_merge#merge",
	"merge-pathnames", "f_merge_#merge-pathnames",
	"method", "t_method#method",
	"method-combination", "a_method#method-combination",
	"method-combination-error", "f_meth_1#method-combination-error",
	"method-qualifiers", "f_method#method-qualifiers",
	"min", "f_max_m#min",
	"minusp", "f_minusp#minusp",
	"mismatch", "f_mismat#mismatch",
	"mod", "a_mod#mod",
	"most-negative-double-float", "v_most_1#most-negative-double-float",
	"most-negative-fixnum", "v_most_p#most-negative-fixnum",
	"most-negative-long-float", "v_most_1#most-negative-long-float",
	"most-negative-short-float", "v_most_1#most-negative-short-float",
	"most-negative-single-float", "v_most_1#most-negative-single-float",
	"most-positive-double-float", "v_most_1#most-positive-double-float",
	"most-positive-fixnum", "v_most_p#most-positive-fixnum",
	"most-positive-long-float", "v_most_1#most-positive-long-float",
	"most-positive-short-float", "v_most_1#most-positive-short-float",
	"most-positive-single-float", "v_most_1#most-positive-single-float",
	"muffle-warning", "a_muffle#muffle-warning",
	"multiple-value-bind", "m_multip#multiple-value-bind",
	"multiple-value-call", "s_multip#multiple-value-call",
	"multiple-value-list", "m_mult_1#multiple-value-list",
	"multiple-value-prog1", "s_mult_1#multiple-value-prog1",
	"multiple-value-setq", "m_mult_2#multiple-value-setq",
	"multiple-values-limit", "v_multip#multiple-values-limit",
	"name-char", "f_name_c#name-char",
	"namestring", "f_namest#namestring",
	"nbutlast", "f_butlas#nbutlast",
	"nconc", "f_nconc#nconc",
	"next-method-p", "f_next_m#next-method-p",
	"nil", "a_nil#nil",
	"nintersection", "f_isec_#nintersection",
	"ninth", "f_firstc#ninth",
	"no-applicable-method", "f_no_app#no-applicable-method",
	"no-next-method", "f_no_nex#no-next-method",
	"not", "a_not#not",
	"notany", "f_everyc#notany",
	"notevery", "f_everyc#notevery",
	"notinline", "d_inline#notinline",
	"nreconc", "f_revapp#nreconc",
	"nreverse", "f_revers#nreverse",
	"nset-difference", "f_set_di#nset-difference",
	"nset-exclusive-or", "f_set_ex#nset-exclusive-or",
	"nstring-capitalize", "f_stg_up#nstring-capitalize",
	"nstring-downcase", "f_stg_up#nstring-downcase",
	"nstring-upcase", "f_stg_up#nstring-upcase",
	"nsublis", "f_sublis#nsublis",
	"nsubst", "f_substc#nsubst",
	"nsubst-if", "f_substc#nsubst-if",
	"nsubst-if-not", "f_substc#nsubst-if-not",
	"nsubstitute", "f_sbs_s#nsubstitute",
	"nsubstitute-if", "f_sbs_s#nsubstitute-if",
	"nsubstitute-if-not", "f_sbs_s#nsubstitute-if-not",
	"nth", "f_nth#nth",
	"nth-value", "m_nth_va#nth-value",
	"nthcdr", "f_nthcdr#nthcdr",
	"null", "a_null#null",
	"number", "t_number#number",
	"numberp", "f_nump#numberp",
	"numerator", "f_numera#numerator",
	"nunion", "f_unionc#nunion",
	"oddp", "f_evenpc#oddp",
	"open", "f_open#open",
	"open-stream-p", "f_open_s#open-stream-p",
	"optimize", "d_optimi#optimize",
	"or", "a_or#or",
	"otherwise", "m_case_#otherwise",
	"output-stream-p", "f_in_stm#output-stream-p",
	"package", "t_pkg#package",
	"package-error", "e_pkg_er#package-error",
	"package-error-package", "f_pkg_er#package-error-package",
	"package-name", "f_pkg_na#package-name",
	"package-nicknames", "f_pkg_ni#package-nicknames",
	"package-shadowing-symbols", "f_pkg_sh#package-shadowing-symbols",
	"package-use-list", "f_pkg_us#package-use-list",
	"package-used-by-list", "f_pkg__1#package-used-by-list",
	"packagep", "f_pkgp#packagep",
	"pairlis", "f_pairli#pairlis",
	"parse-error", "e_parse_#parse-error",
	"parse-integer", "f_parse_#parse-integer",
	"parse-namestring", "f_pars_1#parse-namestring",
	"pathname", "a_pn#pathname",
	"pathname-device", "f_pn_hos#pathname-device",
	"pathname-directory", "f_pn_hos#pathname-directory",
	"pathname-host", "f_pn_hos#pathname-host",
	"pathname-match-p", "f_pn_mat#pathname-match-p",
	"pathname-name", "f_pn_hos#pathname-name",
	"pathname-type", "f_pn_hos#pathname-type",
	"pathname-version", "f_pn_hos#pathname-version",
	"pathnamep", "f_pnp#pathnamep",
	"peek-char", "f_peek_c#peek-char",
	"phase", "f_phase#phase",
	"pi", "v_pi#pi",
	"plusp", "f_minusp#plusp",
	"pop", "m_pop#pop",
	"position", "f_pos_p#position",
	"position-if", "f_pos_p#position-if",
	"position-if-not", "f_pos_p#position-if-not",
	"pprint", "f_wr_pr#pprint",
	"pprint-dispatch", "f_ppr_di#pprint-dispatch",
	"pprint-exit-if-list-exhausted", "m_ppr_ex#pprint-exit-if-list-exhausted",
	"pprint-fill", "f_ppr_fi#pprint-fill",
	"pprint-indent", "f_ppr_in#pprint-indent",
	"pprint-linear", "f_ppr_fi#pprint-linear",
	"pprint-logical-block", "m_ppr_lo#pprint-logical-block",
	"pprint-newline", "f_ppr_nl#pprint-newline",
	"pprint-pop", "m_ppr_po#pprint-pop",
	"pprint-tab", "f_ppr_ta#pprint-tab",
	"pprint-tabular", "f_ppr_fi#pprint-tabular",
	"prin1", "f_wr_pr#prin1",
	"prin1-to-string", "f_wr_to_#prin1-to-string",
	"princ", "f_wr_pr#princ",
	"princ-to-string", "f_wr_to_#princ-to-string",
	"print", "f_wr_pr#print",
	"print-not-readable", "e_pr_not#print-not-readable",
	"print-not-readable-object", "f_pr_not#print-not-readable-object",
	"print-object", "f_pr_obj#print-object",
	"print-unreadable-object", "m_pr_unr#print-unreadable-object",
	"probe-file", "f_probe_#probe-file",
	"proclaim", "f_procla#proclaim",
	"prog", "m_prog_#prog",
	"prog*", "m_prog_#progST",
	"prog1", "m_prog1c#prog1",
	"prog2", "m_prog1c#prog2",
	"progn", "s_progn#progn",
	"program-error", "e_progra#program-error",
	"progv", "s_progv#progv",
	"provide", "f_provid#provide",
	"psetf", "m_setf_#psetf",
	"psetq", "m_psetq#psetq",
	"push", "m_push#push",
	"pushnew", "m_pshnew#pushnew",
	"quote", "s_quote#quote",
	"random", "f_random#random",
	"random-state", "t_rnd_st#random-state",
	"random-state-p", "f_rnd_st#random-state-p",
	"rassoc", "f_rassoc#rassoc",
	"rassoc-if", "f_rassoc#rassoc-if",
	"rassoc-if-not", "f_rassoc#rassoc-if-not",
	"ratio", "t_ratio#ratio",
	"rational", "a_ration#rational",
	"rationalize", "f_ration#rationalize",
	"rationalp", "f_rati_1#rationalp",
	"read", "f_rd_rd#read",
	"read-byte", "f_rd_by#read-byte",
	"read-char", "f_rd_cha#read-char",
	"read-char-no-hang", "f_rd_c_1#read-char-no-hang",
	"read-delimited-list", "f_rd_del#read-delimited-list",
	"read-from-string", "f_rd_fro#read-from-string",
	"read-line", "f_rd_lin#read-line",
	"read-preserving-whitespace", "f_rd_rd#read-preserving-whitespace",
	"read-sequence", "f_rd_seq#read-sequence",
	"reader-error", "e_rder_e#reader-error",
	"readtable", "t_rdtabl#readtable",
	"readtable-case", "f_rdtabl#readtable-case",
	"readtablep", "f_rdta_1#readtablep",
	"real", "t_real#real",
	"realp", "f_realp#realp",
	"realpart", "f_realpa#realpart",
	"reduce", "f_reduce#reduce",
	"reinitialize-instance", "f_reinit#reinitialize-instance",
	"rem", "f_mod_r#rem",
	"remf", "m_remf#remf",
	"remhash", "f_remhas#remhash",
	"remove", "f_rm_rm#remove",
	"remove-duplicates", "f_rm_dup#remove-duplicates",
	"remove-if", "f_rm_rm#remove-if",
	"remove-if-not", "f_rm_rm#remove-if-not",
	"remove-method", "f_rm_met#remove-method",
	"remprop", "f_rempro#remprop",
	"rename-file", "f_rn_fil#rename-file",
	"rename-package", "f_rn_pkg#rename-package",
	"replace", "f_replac#replace",
	"require", "f_provid#require",
	"rest", "f_rest#rest",
	"restart", "t_rst#restart",
	"restart-bind", "m_rst_bi#restart-bind",
	"restart-case", "m_rst_ca#restart-case",
	"restart-name", "f_rst_na#restart-name",
	"return", "m_return#return",
	"return-from", "s_ret_fr#return-from",
	"revappend", "f_revapp#revappend",
	"reverse", "f_revers#reverse",
	"room", "f_room#room",
	"rotatef", "m_rotate#rotatef",
	"round", "f_floorc#round",
	"row-major-aref", "f_row_ma#row-major-aref",
	"rplaca", "f_rplaca#rplaca",
	"rplacd", "f_rplaca#rplacd",
	"safety", "d_optimi#safety",
	"satisfies", "t_satisf#satisfies",
	"sbit", "f_bt_sb#sbit",
	"scale-float", "f_dec_fl#scale-float",
	"schar", "f_char_#schar",
	"search", "f_search#search",
	"second", "f_firstc#second",
	"sequence", "t_seq#sequence",
	"serious-condition", "e_seriou#serious-condition",
	"set", "f_set#set",
	"set-difference", "f_set_di#set-difference",
	"set-dispatch-macro-character", "f_set__1#set-dispatch-macro-character",
	"set-exclusive-or", "f_set_ex#set-exclusive-or",
	"set-macro-character", "f_set_ma#set-macro-character",
	"set-pprint-dispatch", "f_set_pp#set-pprint-dispatch",
	"set-syntax-from-char", "f_set_sy#set-syntax-from-char",
	"setf", "a_setf#setf",
	"setq", "s_setq#setq",
	"seventh", "f_firstc#seventh",
	"shadow", "f_shadow#shadow",
	"shadowing-import", "f_shdw_i#shadowing-import",
	"shared-initialize", "f_shared#shared-initialize",
	"shiftf", "m_shiftf#shiftf",
	"short-float", "t_short_#short-float",
	"short-float-epsilon", "v_short_#short-float-epsilon",
	"short-float-negative-epsilon", "v_short_#short-float-negative-epsilon",
	"short-site-name", "f_short_#short-site-name",
	"signal", "f_signal#signal",
	"signed-byte", "t_sgn_by#signed-byte",
	"signum", "f_signum#signum",
	"simple-array", "t_smp_ar#simple-array",
	"simple-base-string", "t_smp_ba#simple-base-string",
	"simple-bit-vector", "t_smp_bt#simple-bit-vector",
	"simple-bit-vector-p", "f_smp_bt#simple-bit-vector-p",
	"simple-condition", "e_smp_cn#simple-condition",
	"simple-condition-format-arguments", "f_smp_cn#simple-condition-format-arguments",
	"simple-condition-format-control", "f_smp_cn#simple-condition-format-control",
	"simple-error", "e_smp_er#simple-error",
	"simple-string", "t_smp_st#simple-string",
	"simple-string-p", "f_smp_st#simple-string-p",
	"simple-type-error", "e_smp_tp#simple-type-error",
	"simple-vector", "t_smp_ve#simple-vector",
	"simple-vector-p", "f_smp_ve#simple-vector-p",
	"simple-warning", "e_smp_wa#simple-warning",
	"sin", "f_sin_c#sin",
	"single-float", "t_short_#single-float",
	"single-float-epsilon", "v_short_#single-float-epsilon",
	"single-float-negative-epsilon", "v_short_#single-float-negative-epsilon",
	"sinh", "f_sinh_#sinh",
	"sixth", "f_firstc#sixth",
	"sleep", "f_sleep#sleep",
	"slot-boundp", "f_slt_bo#slot-boundp",
	"slot-exists-p", "f_slt_ex#slot-exists-p",
	"slot-makunbound", "f_slt_ma#slot-makunbound",
	"slot-missing", "f_slt_mi#slot-missing",
	"slot-unbound", "f_slt_un#slot-unbound",
	"slot-value", "f_slt_va#slot-value",
	"software-type", "f_sw_tpc#software-type",
	"software-version", "f_sw_tpc#software-version",
	"some", "f_everyc#some",
	"sort", "f_sort_#sort",
	"space", "d_optimi#space",
	"special", "d_specia#special",
	"special-operator-p", "f_specia#special-operator-p",
	"speed", "d_optimi#speed",
	"sqrt", "f_sqrt_#sqrt",
	"stable-sort", "f_sort_#stable-sort",
	"standard", "07_ffb#standard",
	"standard-char", "t_std_ch#standard-char",
	"standard-char-p", "f_std_ch#standard-char-p",
	"standard-class", "t_std_cl#standard-class",
	"standard-generic-function", "t_std_ge#standard-generic-function",
	"standard-method", "t_std_me#standard-method",
	"standard-object", "t_std_ob#standard-object",
	"step", "m_step#step",
	"storage-condition", "e_storag#storage-condition",
	"store-value", "a_store_#store-value",
	"stream", "t_stream#stream",
	"stream-element-type", "f_stm_el#stream-element-type",
	"stream-error", "e_stm_er#stream-error",
	"stream-error-stream", "f_stm_er#stream-error-stream",
	"stream-external-format", "f_stm_ex#stream-external-format",
	"streamp", "f_stmp#streamp",
	"string", "a_string#string",
	"string-capitalize", "f_stg_up#string-capitalize",
	"string-downcase", "f_stg_up#string-downcase",
	"string-equal", "f_stgeq_#string-equal",
	"string-greaterp", "f_stgeq_#string-greaterp",
	"string-left-trim", "f_stg_tr#string-left-trim",
	"string-lessp", "f_stgeq_#string-lessp",
	"string-not-equal", "f_stgeq_#string-not-equal",
	"string-not-greaterp", "f_stgeq_#string-not-greaterp",
	"string-not-lessp", "f_stgeq_#string-not-lessp",
	"string-right-trim", "f_stg_tr#string-right-trim",
	"string-stream", "t_stg_st#string-stream",
	"string-trim", "f_stg_tr#string-trim",
	"string-upcase", "f_stg_up#string-upcase",
	"string/=", "f_stgeq_#stringSLEQ",
	"string<", "f_stgeq_#stringLT",
	"string<=", "f_stgeq_#stringLTEQ",
	"string=", "f_stgeq_#stringEQ",
	"string>", "f_stgeq_#stringGT",
	"string>=", "f_stgeq_#stringGTEQ",
	"stringp", "f_stgp#stringp",
	"structure", "f_docume#structure",
	"structure-class", "t_stu_cl#structure-class",
	"structure-object", "t_stu_ob#structure-object",
	"style-warning", "e_style_#style-warning",
	"sublis", "f_sublis#sublis",
	"subseq", "f_subseq#subseq",
	"subsetp", "f_subset#subsetp",
	"subst", "f_substc#subst",
	"subst-if", "f_substc#subst-if",
	"subst-if-not", "f_substc#subst-if-not",
	"substitute", "f_sbs_s#substitute",
	"substitute-if", "f_sbs_s#substitute-if",
	"substitute-if-not", "f_sbs_s#substitute-if-not",
	"subtypep", "f_subtpp#subtypep",
	"svref", "f_svref#svref",
	"sxhash", "f_sxhash#sxhash",
	"symbol", "t_symbol#symbol",
	"symbol-function", "f_symb_1#symbol-function",
	"symbol-macrolet", "s_symbol#symbol-macrolet",
	"symbol-name", "f_symb_2#symbol-name",
	"symbol-package", "f_symb_3#symbol-package",
	"symbol-plist", "f_symb_4#symbol-plist",
	"symbol-value", "f_symb_5#symbol-value",
	"symbolp", "f_symbol#symbolp",
	"synonym-stream", "t_syn_st#synonym-stream",
	"synonym-stream-symbol", "f_syn_st#synonym-stream-symbol",
	"t", "a_t#t",
	"tagbody", "s_tagbod#tagbody",
	"tailp", "f_ldiffc#tailp",
	"tan", "f_sin_c#tan",
	"tanh", "f_sinh_#tanh",
	"tenth", "f_firstc#tenth",
	"terpri", "f_terpri#terpri",
	"the", "s_the#the",
	"third", "f_firstc#third",
	"throw", "s_throw#throw",
	"time", "m_time#time",
	"trace", "m_tracec#trace",
	"translate-logical-pathname", "f_tr_log#translate-logical-pathname",
	"translate-pathname", "f_tr_pn#translate-pathname",
	"tree-equal", "f_tree_e#tree-equal",
	"truename", "f_tn#truename",
	"truncate", "f_floorc#truncate",
	"two-way-stream", "t_two_wa#two-way-stream",
	"two-way-stream-input-stream", "f_two_wa#two-way-stream-input-stream",
	"two-way-stream-output-stream", "f_two_wa#two-way-stream-output-stream",
	"type", "a_type#type",
	"type-error", "e_tp_err#type-error",
	"type-error-datum", "f_tp_err#type-error-datum",
	"type-error-expected-type", "f_tp_err#type-error-expected-type",
	"type-of", "f_tp_of#type-of",
	"typecase", "m_tpcase#typecase",
	"typep", "f_typep#typep",
	"unbound-slot", "e_unboun#unbound-slot",
	"unbound-slot-instance", "f_unboun#unbound-slot-instance",
	"unbound-variable", "e_unbo_1#unbound-variable",
	"undefined-function", "e_undefi#undefined-function",
	"unexport", "f_unexpo#unexport",
	"unintern", "f_uninte#unintern",
	"union", "f_unionc#union",
	"unless", "m_when_#unless",
	"unread-char", "f_unrd_c#unread-char",
	"unsigned-byte", "t_unsgn_#unsigned-byte",
	"untrace", "m_tracec#untrace",
	"unuse-package", "f_unuse_#unuse-package",
	"unwind-protect", "s_unwind#unwind-protect",
	"update-instance-for-different-class", "f_update#update-instance-for-different-class",
	"update-instance-for-redefined-class", "f_upda_1#update-instance-for-redefined-class",
	"upgraded-array-element-type", "f_upgr_1#upgraded-array-element-type",
	"upgraded-complex-part-type", "f_upgrad#upgraded-complex-part-type",
	"upper-case-p", "f_upper_#upper-case-p",
	"use-package", "f_use_pk#use-package",
	"use-value", "a_use_va#use-value",
	"user-homedir-pathname", "f_user_h#user-homedir-pathname",
	"values", "a_values#values",
	"values-list", "f_vals_l#values-list",
	"variable", "f_docume#variable",
	"vector", "a_vector#vector",
	"vector-pop", "f_vec_po#vector-pop",
	"vector-push", "f_vec_ps#vector-push",
	"vector-push-extend", "f_vec_ps#vector-push-extend",
	"vectorp", "f_vecp#vectorp",
	"warn", "f_warn#warn",
	"warning", "e_warnin#warning",
	"when", "m_when_#when",
	"wild-pathname-p", "f_wild_p#wild-pathname-p",
	"with-accessors", "m_w_acce#with-accessors",
	"with-compilation-unit", "m_w_comp#with-compilation-unit",
	"with-condition-restarts", "m_w_cnd_#with-condition-restarts",
	"with-hash-table-iterator", "m_w_hash#with-hash-table-iterator",
	"with-input-from-string", "m_w_in_f#with-input-from-string",
	"with-open-file", "m_w_open#with-open-file",
	"with-open-stream", "m_w_op_1#with-open-stream",
	"with-output-to-string", "m_w_out_#with-output-to-string",
	"with-package-iterator", "m_w_pkg_#with-package-iterator",
	"with-simple-restart", "m_w_smp_#with-simple-restart",
	"with-slots", "m_w_slts#with-slots",
	"with-standard-io-syntax", "m_w_std_#with-standard-io-syntax",
	"write", "f_wr_pr#write",
	"write-byte", "f_wr_by#write-byte",
	"write-char", "f_wr_cha#write-char",
	"write-line", "f_wr_stg#write-line",
	"write-sequence", "f_wr_seq#write-sequence",
	"write-string", "f_wr_stg#write-string",
	"write-to-string", "f_wr_to_#write-to-string",
	"y-or-n-p", "f_y_or_n#y-or-n-p",
	"yes-or-no-p", "f_y_or_n#yes-or-no-p",
	"zerop", "f_zerop#zerop",
	"#", "02_dh#",
	"##", "02_dhp#",
	"#'", "02_dhb#",
	"#(", "02_dhc#",
	"#*", "02_dhd#",
	"#:", "02_dhe#",
	"#.", "02_dhf#",
	"#=", "02_dho#",
	"#+", "02_dhq#",
	"#-", "02_dhr#",
	"#<", "02_dht#",
	"#A", "02_dhl#",
	"#B", "02_dhg#",
	"#C", "02_dhk#",
	"#O", "02_dhh#",
	"#P", "02_dhn#",
	"#R", "02_dhj#",
	"#S", "02_dhm#",
	"#X", "02_dhi#",
	"#\\", "02_dha#",
	"#|", "02_dhs#",
	"\"", "02_de#",
	"'", "02_dc#",
	"`", "02_df#",
	",", "02_dg#",
	"(", "02_da#",
	",", "02_db#",
	";", "02_dd#"
	);

our $only_path = grep /--path/, @ARGV;
our $local_copy = grep /--local/, @ARGV;

foreach (@ARGV) {
	my $node = $map{$_};	
	if ($node) {
        if ($only_path) {
			$node =~ s/\#.*/.htm/;			
			if ($local_copy) {
				print "$ENV{'HOME'}/.cl/doc/hyperspec/Body/$node\n";
			} else {
				print "http://www.lispworks.com/documentation/HyperSpec/Body/$node\n";
			}
		} else {
			$node =~ s/\#/.htm\#/;
        	$node =~ s/\#$//;
			if ($local_copy) {
				system("osascript -e \"open location \\\"file://$ENV{'HOME'}/.cl/doc/hyperspec/Body/$node\\\"\"");
			} else {
				system("osascript -e \"open location \\\"http://www.lispworks.com/documentation/HyperSpec/Body/$node\\\"\"");
			}
		}
    }
}